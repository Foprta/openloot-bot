//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "subscription")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub chat_id: String,
    pub item_collection: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub item_name: String,
    #[sea_orm(column_type = "Double")]
    pub price: f64,
    pub notificate: bool,
    #[sea_orm(column_type = "Double", nullable)]
    pub last_notified_price: Option<f64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::market_item::Entity",
        from = "Column::ItemName",
        to = "super::market_item::Column::OptionName",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    MarketItem,
}

impl Related<super::market_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MarketItem.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
